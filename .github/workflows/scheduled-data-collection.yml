name: Scheduled Slack Data Collection

on:
  schedule:
    # Run every day at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  collect-slack-data:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Collect Slack Data for All Channels
      env:
        SLACK_XOXC_TOKEN: ${{ secrets.SLACK_XOXC_TOKEN }}
        SLACK_XOXD_TOKEN: ${{ secrets.SLACK_XOXD_TOKEN }}
        LOGS_CHANNEL_ID: ${{ secrets.LOGS_CHANNEL_ID }}
      run: |
        python -c "
        import os
        from connectors.slack.tools.unified_slack_tools import dump_slack_data_tool
        from connectors.slack.client import SlackClient
        from connectors.slack.config import SlackConfig
        
        # Load Slack configuration
        slack_config = SlackConfig.load('config/slack.yaml')
        slack_client = SlackClient(slack_config)
        dump_tool = dump_slack_data_tool(slack_client, slack_config)
        
        # Get all configured channels
        channels = slack_config.get_channels()
        print(f'Found {len(channels)} channels to process')
        
        # Dump data for all channels
        for channel in channels:
            try:
                print(f'Dumping data for channel: {channel[\"name\"]} ({channel[\"id\"]})')
                result = dump_tool(channel['id'])
                print(f'‚úÖ Success: {channel[\"name\"]}')
            except Exception as e:
                print(f'‚ùå Error processing {channel[\"name\"]}: {e}')
                # Continue with other channels instead of failing completely
                continue
        
        print('üéâ Slack data collection completed')
        "
    
    - name: Upload Slack Data Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: slack-data-${{ github.run_number }}
        path: connectors/slack/slack_dump/
        retention-days: 30
    
    - name: Send Notification to Slack
      if: always()
      env:
        SLACK_XOXC_TOKEN: ${{ secrets.SLACK_XOXC_TOKEN }}
        LOGS_CHANNEL_ID: ${{ secrets.LOGS_CHANNEL_ID }}
      run: |
        python -c "
        import os
        import requests
        
        slack_token = os.getenv('SLACK_XOXC_TOKEN')
        channel_id = os.getenv('LOGS_CHANNEL_ID')
        
        if slack_token and channel_id:
            status = '‚úÖ Success' if os.getenv('JOB_STATUS') == 'success' else '‚ùå Failed'
            message = f'{status} Daily Slack data collection\\nRun: {os.getenv(\"GITHUB_RUN_NUMBER\")}\\nCommit: {os.getenv(\"GITHUB_SHA\")[:8]}'
            
            requests.post('https://slack.com/api/chat.postMessage', {
                'token': slack_token,
                'channel': channel_id,
                'text': message
            })
        "
