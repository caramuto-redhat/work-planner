name: Scheduled Slack Data Collection

on:
  schedule:
    # Run every day at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  collect-slack-data:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Collect Slack Data for All Channels
      env:
        SLACK_XOXC_TOKEN: ${{ secrets.SLACK_XOXC_TOKEN }}
        SLACK_XOXD_TOKEN: ${{ secrets.SLACK_XOXD_TOKEN }}
        LOGS_CHANNEL_ID: ${{ secrets.LOGS_CHANNEL_ID }}
      run: |
        python -c "
        import os
        import yaml
        from connectors.schedule.config import ScheduleConfig
        from connectors.slack.tools.unified_slack_tools import dump_slack_data_tool
        from connectors.slack.client import SlackClient
        from connectors.slack.config import SlackConfig
        
        # Read attachment setting from schedule config
        try:
            schedule_config = ScheduleConfig()
            include_attachments = schedule_config.get_include_attachments()
            print(f'üìé Attachment inclusion setting: {include_attachments}')
        except Exception as e:
            print(f'‚ö†Ô∏è  Could not read schedule config: {e}')
            include_attachments = False
        
        # Load Slack configuration
        slack_config = SlackConfig.load('config/slack.yaml')
        slack_client = SlackClient(slack_config)
        
        # Configure attachment directory if needed
        if include_attachments:
            slack_config.config['data_collection'] = slack_config.config.get('data_collection', {})
            slack_config.config['data_collection']['attachments_directory'] = 'connectors/slack/slack_dump/slack_attachments'
        
        dump_tool = dump_slack_data_tool(slack_client, slack_config)
        
        # Get all configured channels from slack_channels section
        slack_channels = slack_config.get('slack_channels', {})
        print(f'Found {len(slack_channels)} channels to process')
        
        # Dump data for all channels
        for channel_id, team_name in slack_channels.items():
            try:
                print(f'Dumping data for channel: {channel_id} (team: {team_name}) - Attachments: {include_attachments}')
                result = dump_tool(channel_id)
                print(f'‚úÖ Success: {channel_id} -> {team_name}')
            except Exception as e:
                print(f'‚ùå Error processing {channel_id}: {e}')
                # Continue with other channels instead of failing completely
                continue
        
        print(f'üéâ Slack data collection completed - Attachments: {include_attachments}')
        "
    
    - name: Collect Jira Data for All Teams
      env:
        JIRA_URL: ${{ secrets.JIRA_URL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      run: |
        python -c "
        import os
        
        # Debug: Print environment variables for Jira collection
        print('üîç Jira Environment variables check:')
        print(f'JIRA_URL: {\"‚úÖ SET\" if os.getenv(\"JIRA_URL\") else \"‚ùå MISSING\"} ({os.getenv(\"JIRA_URL\", \"\")[:50]}...)')
        print(f'JIRA_API_TOKEN: {\"‚úÖ SET\" if os.getenv(\"JIRA_API_TOKEN\") else \"‚ùå MISSING\"} ({os.getenv(\"JIRA_API_TOKEN\", \"\")[:10]}...)')
        
        from connectors.jira.tools.jira_data_collection import dump_jira_team_data_tool
        from connectors.jira.client import JiraClient
        from connectors.jira.config import JiraConfig
        
        print('üé´ Starting Jira data collection...')
        
        # Initialize Jira client and config
        jira_config = JiraConfig.load('config/jira.yaml')
        jira_client = JiraClient(jira_config)
        
        # Create dump tool
        dump_tool = dump_jira_team_data_tool(jira_client, jira_config)
        
        # Collect data for all configured teams
        teams = ['toolchain', 'foa', 'assessment', 'boa']
        tickets_filter = 'All In Progress'
        
        for team in teams:
            try:
                print(f'üé´ Collecting Jira data for team: {team} (filter: {tickets_filter})')
                result = dump_tool(team, tickets_filter)
                print(f'‚úÖ Jira data collected for team: {team}')
            except Exception as e:
                print(f'‚ùå Error collecting Jira data for team {team}: {e}')
                continue
        
        print('üéâ Jira data collection completed')
        "
    
    - name: Run AI Summary Analysis
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        JIRA_URL: ${{ secrets.JIRA_URL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        SLACK_XOXC_TOKEN: ${{ secrets.SLACK_XOXC_TOKEN }}
        SLACK_XOXD_TOKEN: ${{ secrets.SLACK_XOXD_TOKEN }}
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_TOKEN }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      run: |
        python -c "
        import os
        
        # Debug: Print environment variables
        print('üîç Environment variables check:')
        print(f'JIRA_URL: {\"‚úÖ SET\" if os.getenv(\"JIRA_URL\") else \"‚ùå MISSING\"}')
        print(f'JIRA_API_TOKEN: {\"‚úÖ SET\" if os.getenv(\"JIRA_API_TOKEN\") else \"‚ùå MISSING\"}')
        print(f'GEMINI_API_KEY: {\"‚úÖ SET\" if os.getenv(\"GEMINI_API_KEY\") else \"‚ùå MISSING\"}')
        print(f'EMAIL_USERNAME: {\"‚úÖ SET\" if os.getenv(\"EMAIL_USERNAME\") else \"‚ùå MISSING\"}')
        print(f'EMAIL_PASSWORD: {\"‚úÖ SET\" if os.getenv(\"EMAIL_PASSWORD\") else \"‚ùå MISSING\"}')
        print(f'EMAIL_FROM: {\"‚úÖ SET\" if os.getenv(\"EMAIL_FROM\") else \"‚ùå MISSING\"}')
        print(f'SLACK_XOXC_TOKEN: {\"‚úÖ SET\" if os.getenv(\"SLACK_XOXC_TOKEN\") else \"‚ùå MISSING\"}')
        
        from connectors.gemini.tools.ai_summary_tool import ai_summary_tool
        from connectors.gemini.client import GeminiClient
        from connectors.gemini.config import GeminiConfig
        from connectors.jira.client import JiraClient
        from connectors.jira.config import JiraConfig
        
        print('ü§ñ Starting AI Summary Analysis...')
        
        # Initialize Gemini client
        gemini_config = GeminiConfig()
        gemini_client = GeminiClient(gemini_config.get_config())
        
        # Initialize Jira client 
        jira_config = JiraConfig.load('config/jira.yaml')
        jira_client = JiraClient(jira_config)
        
        # Create AI summary tool
        ai_tool_func = ai_summary_tool(gemini_client, gemini_config.get_config())
        
        # Run analysis for each team with email sending enabled
        teams = ['toolchain', 'foa', 'assessment', 'boa']
        
        for team in teams:
            try:
                print(f'üîç Analyzing data for team: {team}')
                result = ai_tool_func(team=team, send_email=True)
                print(f'‚úÖ AI analysis completed for team: {team}')
                print(f'üìß Email sent successfully')
            except Exception as e:
                print(f'‚ùå Error analyzing team {team}: {e}')
                # Continue with other teams
                continue
        
        print('üéâ AI Summary Analysis completed for all teams')
        "
    
    - name: Send Slack Data via Email
      if: false  # DISABLED - Use daily-summary.yml workflow for Daily Summary emails instead
      env:
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_TOKEN }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      run: |
        python -c "
        import os
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from email.mime.base import MIMEBase
        from email import encoders
        from datetime import datetime
        import zipfile
        import yaml
        
        # Email configuration
        email_username = os.getenv('EMAIL_USERNAME')
        email_token = os.getenv('EMAIL_PASSWORD')
        email_from = os.getenv('EMAIL_FROM')
        
        if not all([email_username, email_token, email_from]):
            print('‚ùå Email credentials not configured')
            exit(1)
        
        # Read schedule configuration to check attachment setting
        try:
            with open('config/schedule.yaml', 'r') as f:
                schedule_config = yaml.safe_load(f)
            include_attachments = schedule_config.get('slack', {}).get('include_attachments', False)
            print(f'üìé Attachment inclusion setting: {include_attachments}')
        except Exception as e:
            print(f'‚ö†Ô∏è  Could not read schedule config: {e}')
            include_attachments = False
        
        # Create zip file with all slack dumps
        zip_filename = f'slack-dumps-{datetime.now().strftime(\"%Y%m%d-%H%M%S\")}.zip'
        print(f'üîê Creating zip file: {zip_filename}')
        file_count = 0
        with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk('connectors/slack/slack_dump/'):
                # Skip attachment directories if not including attachments
                if not include_attachments and 'slack_attachments' in root:
                    print(f'Skipping attachment directory: {root}')
                    continue
                
                print(f'üìÅ Processing directory: {root}')
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, 'connectors/slack/slack_dump/')
                    zipf.write(file_path, arcname)
                    file_count += 1
                    print(f'üìÑ Adding file: {arcname}')
        
        print(f'üì¶ Zip file created with {file_count} files')
        
        # Create email
        msg = MIMEMultipart()
        msg['From'] = email_from
        msg['To'] = email_from  # Send to yourself
        msg['Subject'] = f'Slack Data Collection - {datetime.now().strftime(\"%Y-%m-%d %H:%M\")}'
        
        # Email body
        body = f'''
        Slack Data Collection Report
        
        Date: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}
        Run: {os.getenv(\"GITHUB_RUN_NUMBER\")}
        Commit: {os.getenv(\"GITHUB_SHA\")[:8]}
        Include Attachments: {include_attachments}
        
        This email contains the latest Slack data dumps from all configured channels.
        The attached zip file includes both raw and parsed data.
        
        Channels processed:
        '''
        
        # Add channel list to email body
        from connectors.slack.config import SlackConfig
        slack_config = SlackConfig.load('config/slack.yaml')
        slack_channels = slack_config.get('slack_channels', {})
        
        for channel_id, team_name in slack_channels.items():
            body += f'  - {channel_id} ({team_name})\\n'
        
        body += f'''
        
        The zip file contains:
        - Raw Slack dumps (text format)
        - Parsed Slack dumps (text format)'''
        
        if include_attachments:
            body += '''
        - Slack file attachments (images, documents, etc.)'''
        else:
            body += '''
        - Attachment files excluded (configured in schedule.yaml)'''
        
        body += '''
        
        Best regards,
        Work Planner MCP Server
        '''
        
        msg.attach(MIMEText(body, 'plain'))
        
        # Only attach zip file if attachments are enabled (both Slack attachment download AND email attachment)
        if include_attachments:
            print(f'üìé Attaching zip file to email: {zip_filename}')
            # Attach zip file
            with open(zip_filename, 'rb') as attachment:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(attachment.read())
                encoders.encode_base64(part)
                part.add_header(
                    'Content-Disposition',
                    f'attachment; filename= {zip_filename}',
                )
                msg.attach(part)
        else:
            print(f'üìé No zip file attachment - attachments disabled')
        
        # Send email
        try:
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(email_username, email_token)
            text = msg.as_string()
            server.sendmail(email_from, email_from, text)
            server.quit()
            
            print(f'‚úÖ Email sent successfully with {zip_filename}')
            print(f'üìß Sent to: {email_from}')
            
        except Exception as e:
            print(f'‚ùå Failed to send email: {e}')
            exit(1)
        
        # Clean up local zip file
        os.remove(zip_filename)
        "
