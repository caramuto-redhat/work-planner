name: Scheduled Slack Data Collection

on:
  schedule:
    # Run every day at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  collect-slack-data:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Collect Slack Data for All Channels
      env:
        SLACK_XOXC_TOKEN: ${{ secrets.SLACK_XOXC_TOKEN }}
        SLACK_XOXD_TOKEN: ${{ secrets.SLACK_XOXD_TOKEN }}
        LOGS_CHANNEL_ID: ${{ secrets.LOGS_CHANNEL_ID }}
      run: |
        python -c "
        import os
        from connectors.slack.tools.unified_slack_tools import dump_slack_data_tool
        from connectors.slack.client import SlackClient
        from connectors.slack.config import SlackConfig
        
        # Load Slack configuration
        slack_config = SlackConfig.load('config/slack.yaml')
        slack_client = SlackClient(slack_config)
        dump_tool = dump_slack_data_tool(slack_client, slack_config)
        
        # Get all configured channels from slack_channels section
        slack_channels = slack_config.get('slack_channels', {})
        print(f'Found {len(slack_channels)} channels to process')
        
        # Dump data for all channels
        for channel_id, team_name in slack_channels.items():
            try:
                print(f'Dumping data for channel: {channel_id} (team: {team_name})')
                result = dump_tool(channel_id)
                print(f'‚úÖ Success: {channel_id} -> {team_name}')
            except Exception as e:
                print(f'‚ùå Error processing {channel_id}: {e}')
                # Continue with other channels instead of failing completely
                continue
        
        print('üéâ Slack data collection completed')
        "
    
    - name: Upload to Google Drive
      if: always()
      env:
        GOOGLE_DRIVE_CREDENTIALS: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      run: |
        python -c "
        import os
        import json
        import zipfile
        from datetime import datetime
        from google.oauth2 import service_account
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload
        
        # Create credentials from secret
        credentials_info = json.loads(os.getenv('GOOGLE_DRIVE_CREDENTIALS'))
        credentials = service_account.Credentials.from_service_account_info(
            credentials_info,
            scopes=['https://www.googleapis.com/auth/drive.file']
        )
        
        # Build Drive service
        service = build('drive', 'v3', credentials=credentials)
        
        # Create zip file with all slack dumps
        zip_filename = f'slack-dumps-{datetime.now().strftime(\"%Y%m%d-%H%M%S\")}.zip'
        with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk('connectors/slack/slack_dump/'):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, 'connectors/slack/slack_dump/')
                    zipf.write(file_path, arcname)
        
        # Upload to Google Drive (Shared Drive)
        folder_id = os.getenv('GOOGLE_DRIVE_FOLDER_ID')
        file_metadata = {
            'name': zip_filename,
            'parents': [folder_id] if folder_id else []
        }
        
        media = MediaFileUpload(zip_filename, mimetype='application/zip')
        
        # Use supportsAllDrives=True for Shared Drives
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id',
            supportsAllDrives=True
        ).execute()
        
        print(f'‚úÖ Uploaded {zip_filename} to Google Drive')
        print(f'üìÅ File ID: {file.get(\"id\")}')
        
        # Clean up local zip file
        os.remove(zip_filename)
        "
