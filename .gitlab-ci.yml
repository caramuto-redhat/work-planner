stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Build and push container to GitLab Container Registry
build_container:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "ðŸ”¨ Building Work Planner container with GitLab secrets..."
    - docker build 
        --build-arg JIRA_URL="$JIRA_URL"
        --build-arg JIRA_API_TOKEN="$JIRA_API_TOKEN"
        --build-arg SLACK_XOXC_TOKEN="$SLACK_XOXC_TOKEN"
        --build-arg SLACK_XOXD_TOKEN="$SLACK_XOXD_TOKEN"
        --build-arg LOGS_CHANNEL_ID="$LOGS_CHANNEL_ID"
        -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest
    - echo "âœ… Container built and pushed to GitLab Container Registry"
  only:
    - main
    - tags

# Test the built container
test_container:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "ðŸ§ª Testing Work Planner container..."
    - docker run --rm $CI_REGISTRY_IMAGE:latest python -c "print('GitLab CI/CD Test: Container built successfully')"
    - docker run --rm $CI_REGISTRY_IMAGE:latest python -c "from connectors.jira.client import JiraClient; print('Jira connector working')"
    - docker run --rm $CI_REGISTRY_IMAGE:latest python -c "from connectors.slack.client import SlackClient; print('Slack connector working')"
    - echo "âœ… Container test successful"
  only:
    - main
    - tags

# Deploy notification (optional)
deploy_notification:
  stage: deploy
  image: alpine:latest
  script:
    - echo "ðŸš€ Work Planner MCP Server deployed!"
    - echo "ðŸ“¦ Container: $CI_REGISTRY_IMAGE:latest"
    - echo "ðŸ”— Registry: $CI_REGISTRY"
    - echo "âœ… Ready for use in Cursor MCP configuration"
  only:
    - main
    - tags
  when: manual